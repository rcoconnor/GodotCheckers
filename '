extends Node2D


func _ready(): 
	pass 

# func _process(_delta): 
#	pass 


# Transfors a string representing board position into a number representing
# it's index on the board 
static func position_string_to_index(position_string): 
	var column = 0
	if position_string[0] == "A":
		column = 0	
	if position_string[0] == "B":
		column = 1	
	if position_string[0] == "C":
		column = 2	
	if position_string[0] == "D":
		column = 3	
	if position_string[0] == "E":
		column = 4	
	if position_string[0] == "F":
		column = 5	
	if position_string[0] == "G":
		column = 6	
	if position_string[0] == "H":
		column = 7	
	
	var position = ((int(position_string[1])- 1) * 8) + column 
	return position 


# returns the bitmap corresponding to the piece located on the position
static func piece_table(position): 
	var idx = 0
	var num_to_return = 1
	if typeof(position) == TYPE_STRING:
		idx = position_string_to_index(position)
	else: 
		idx = position
	num_to_return = num_to_return << idx 
	return num_to_return


static func piece_table_test(): 
	for i in range(64): 
		var value = piece_table(i)
		print("%d: val: %016X" % [i, value])




static func mask_rank(rank): 
	var num_to_return = 0x00000000000000FF		
	for i in range(rank): 
		num_to_return = num_to_return << 8
	print("ret: %016X" % num_to_return)	
	return num_to_return		

static func mask_rank_test(): 
	for i in range(8): 
		var num = mask_rank(i)	
		print("num: %016X" % num)	


# Converts an integer into a 64-bit binary number
static func convert_to_binary_string(num): 
	var bin_string = ""
	print("num: %016X" % num)	
	var count = 63 
	while count >= 0: 
		var temp = num >> count
		if (temp & 1): bin_string += "1"
		else: bin_string += "0"
		count -= 1
	return bin_string



# returns a bitboard that when anded with another clears the board except for
# that rank  
static func clear_rank(rank): 
	var num_to_return = 0xFFFFFFFFFFFFFF << 8 
	print("number we are starting: %016X" % num_to_return)
	for i in rank: 
		num_to_return = num_to_return << 8
	return num_to_return


# Tests each rank in order to make sure everything is correct 
static func clear_rank_test(): 
	for i in range(8):
		var val = clear_rank(i)
		print("val: %016X" % val)
		print("bin: ", convert_to_binary_string(val))





